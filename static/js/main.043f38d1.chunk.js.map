{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","utils/helpers.ts","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","status","query","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoItem","index","selectedTodo","dispatch","className","classNames","id","completed","title","onClick","TodoList","preparedTodos","newTodos","trim","normalizedQuery","toLowerCase","toLocaleLowerCase","includes","Active","Completed","getNormalisedTodos","map","TodoFilter","value","onChange","e","target","All","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","user","setUser","useEffect","userId","data","href","email","name","App","isLoading","setIsLoading","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.043f38d1.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatus = {\n  type: 'filter/SET_STATUS',\n  payload: Status,\n};\n\nconst setStatus = (status: Status): SetStatus => {\n  return {\n    type: 'filter/SET_STATUS',\n    payload: status,\n  };\n};\n\ntype SetQuery = {\n  type: 'filter/SET_QUERY',\n  payload: string,\n};\n\nconst setQuery = (query: string): SetQuery => {\n  return {\n    type: 'filter/SET_QUERY',\n    payload: query,\n  };\n};\n\nexport const actions = { setStatus, setQuery };\n\nconst initialState = {\n  query: '',\n  status: 'all' as Status,\n};\n\ntype InitialState = {\n  query: string,\n  status: Status,\n};\ntype Action = SetStatus | SetQuery;\n\nconst filterReducer = (state = initialState, action: Action): InitialState => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'filter/SET_QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodos = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (todos: Todo[]): SetTodos => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Action = SetTodos;\n\nconst todosReducer = (state: Todo[] = [], action: Action): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import classNames from 'classnames';\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo;\n  index: number;\n};\n\nexport const TodoItem: React.FC<Props> = ({\n  todo,\n  index,\n}) => {\n  const selectedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const selectTodoHandler = (currentTodo: Todo) => {\n    dispatch(actions.setTodo(currentTodo));\n  };\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={classNames({\n        'has-background-info-light': selectedTodo?.id === todo.id,\n      })}\n    >\n      <td className=\"is-vcentered\">{index + 1}</td>\n\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !todo.completed,\n          'has-text-success': todo.completed,\n        })}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => selectTodoHandler(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames({\n              'far fa-eye': selectedTodo?.id !== todo.id,\n              'far fa-eye-slash': selectedTodo?.id === todo.id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import { useAppSelector } from '../../app/hooks';\nimport { getNormalisedTodos } from '../../utils/helpers';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\nexport const TodoList = () => {\n  const { status, query } = useAppSelector(state => state.filter);\n  const todos = useAppSelector(state => state.todos);\n  const preparedTodos = getNormalisedTodos(todos, query, status);\n\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preparedTodos.map((todo, index) => (\n          <TodoItem\n            todo={todo}\n            index={index}\n            key={todo.id}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Status } from '../types/Status';\nimport { Todo } from '../types/Todo';\n\nexport function getNormalisedTodos(\n  todos: Todo[],\n  query: string,\n  filter: Status,\n): Todo[] {\n  let newTodos = todos;\n\n  if (query.trim()) {\n    const normalizedQuery = query.trim().toLowerCase();\n\n    newTodos = todos.filter(\n      todo => todo.title.toLocaleLowerCase().includes(normalizedQuery),\n    );\n  }\n\n  switch (filter) {\n    case Status.Active:\n      return newTodos.filter(todo => !todo.completed);\n\n    case Status.Completed:\n      return newTodos.filter(todo => todo.completed);\n\n    default:\n      return newTodos;\n  }\n}\n","import { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector(state => state.filter);\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={(e) => dispatch(actions.setStatus(\n              e.target.value as Status,\n            ))}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={(e) => dispatch(actions.setQuery(e.target.value))}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {!!query && (\n            /* eslint-disable-next-line jsx-a11y/control-has-associated-label */\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={() => dispatch(actions.setQuery(''))}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch } from '../../app/hooks';\nimport { actions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    getUser(todo?.userId).then(data => {\n      setUser(data);\n    });\n  }, []);\n\n  const closeModal = () => {\n    dispatch(actions.removeTodo());\n  };\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={closeModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const todo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos().then(data => {\n      dispatch(todosActions.setTodos(data));\n      setIsLoading(false);\n    });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {todo && (\n        <TodoModal todo={todo} />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}